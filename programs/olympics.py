from open_imagilib.emulator import *

# ---

from math import pi, sin, cos

# Image as Compressed Text version 1 (RLE)
MAGIC = 'ICT1'
VALUES = '_.:-+=abcdefghijklmnopqrstuvwxyz'
CODES = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ~?!@#$%&*/()[]{}<>'
REPEATS = ' 1234567890'


def decompress(text):
    w = h = x = y = 0
    p = (0, 0, 0)
    codes = {}
    rows = []
    for line in text:

        if not w:
            magic, w, h, line = line.split('|', 3)
            assert magic == MAGIC
            w, h = int(w), int(h)
            assert 0 < w <= 1000
            assert 0 < h <= 1000
            rows = [[] for _ in range(h)]

        if y >= h:
            break

        i = 0
        while i < len(line):
            c = line[i]
            i += 1

            if c in VALUES:
                r = VALUES.index(c) << 3
                g = VALUES.index(line[i]) << 3
                b = VALUES.index(line[i + 1]) << 3
                i += 2
                p = (r, g, b)
                repeats = 1
            elif c in codes:
                p = codes[c]
                repeats = 1
            elif c in CODES:
                codes[c] = p
                continue
            elif c in REPEATS:
                repeats = REPEATS.index(c)
            elif c == '^':
                repeats = int(line[i] + line[i + 1])
                i += 2
            else:
                continue

            for j in range(repeats):
                rows[y].append(p)
                x += 1
                if x == w:
                    x = 0
                    y += 1

        assert i == len(line)

    assert x == 0
    assert y == h

    return rows


a = Animation()


def animated_camera(img, *, scale=1.0, frames=100, frame_time_ms=50):
    h = len(img)
    w = len(img[0])
    yo = 0.5 * (h - 8.01 / scale)
    xo = 0.5 * (w - 8.01 / scale)
    omega = 2 * pi / frames
    for t in range(frames):
        y = yo + yo * cos(omega * t)
        x = xo - xo * sin(omega * t)
        transform(img, y, x, scale)
        a.add_frame(m, frame_time_ms)


def transform(img, y0, x0, s):
    si = 1 / s
    for i in range(8):
        y = y0 + i * si
        iy0 = int(y)
        iy1 = iy0 + 1
        r0 = img[iy0]
        r1 = img[iy1]
        wy1 = y - iy0
        wy0 = 1 - wy1
        for j in range(8):
            x = x0 + j * si
            ix0 = int(x)
            ix1 = ix0 + 1
            wx1 = x - ix0
            wx0 = (1 - wx1)
            m[i][j] = sum_colors([
                multiply_color(r0[ix0], wy0 * wx0),
                multiply_color(r0[ix1], wy0 * wx1),
                multiply_color(r1[ix0], wy1 * wx0),
                multiply_color(r1[ix1], wy1 * wx1),
            ])


def sum_colors(colors):
    rs, gs, bs = 0, 0, 0
    for r, g, b in colors:
        rs += r
        gs += g
        bs += b
    return rs, gs, bs


def multiply_color(color, multiplier):
    r, g, b = color
    return (
        int(round(r * multiplier)),
        int(round(g * multiplier)),
        int(round(b * multiplier)),
    )


# Generated by image_compressor.py
# Original: https://en.wikipedia.org/wiki/Olympic_Games
COMPRESSED_IMAGE = [
    'ICT1|118|61|lll ^99 ^99 ^99 ^99 ^91kllA4 ^30kkkB5 ^30',
    'lkkC4 ^35AjlmDhknfkpEdkqFckqGbkrHckrGekpgkoiknIA ^22B',
    '1iiiJgggdddcccbbb1cccdddgggJB1 ^22mkkKojjrhitfhuegLvdf',
    'M1vefLsghNqijnjkOC ^29AIF=krP.ksQ8-ksRHgkoD ^18BJeeeS',
    'aaaT...U___V7UTSJB ^18OshiMxbeWxadX8wceYufgqijK ^25AI',
    'G:ksZQ^13PgkpA ^15jjj~S---V^13---S~ ^15KNYX^13xaevegpij',
    'C ^22AE-krQ^17GI ^12Bhhh===V^17===hhhB ^12pjjMX^17Wtgh',
    'K ^20DFQ6ZPHckrHakr?+kr!Q6Phko@A 9Bfff#:::V5U+++Tbbb1',
    'T+++UV5:::#B 9CqiiYX6WwcfM2YWX6LO ^18DGQ5HEIDA3jkm@F!',
    'Q4!@A 7BSUV4===SJ~B3~JS===V4USB 7lklqiiWX4WLqhiojjKC1',
    'KnkkpjjNMX5vefO ^16AFQ4?gkoA 8AIFZQ3!I 6B#UV3+++#~B 7',
    'B~#+++V3U#B 6pijwbeX3xaeLpjjC 8KrhiwcfX4LK ^14AEQ4Fjkm',
    ' ^12Agko!Q3?jkm 5hhh---V3TJB ^11BJTV3---hhh 5OwcfX3wbe',
    'rhiC ^12OLX4tghC ^13I-krQ3ekpA ^14AhknPQ3FA 3~TV3bbb~',
    ' ^15~bbbV3T~ 3CufgX3Yqijlkl ^14KtfhX3Wpij ^12AGQ3FA ^17',
    '@RQ2RI 2B#V3T~ ^17~TV3#B 2pijWX2Wqii ^17KLX3vegK ^11hkn',
    'ZQ2?jkm ^18AekpQ3GA 1~===V2:::hhh ^19hhh:::V2===~ 1CL',
    'X3tghC ^18OwcfX2xaeqij 0AFQ2Z@ ^20D?Q2RI 1gggV3dddB ^19',
    'BdddV3ggg 1ojjWX2wdfnkk ^20rhiX3LC 9D!Q2HA ^21gkpQ3E ',
    'BcccV2---J ^21J---V2cccB NX3rhi ^21KMX2wbeO 9@Q3gkp ^22',
    'jkm!Q2GA~+++V2cccB ^21BcccV2+++~CvegX2YO ^22NX3qii 9E',
    'Q2RI ^22AGQ2PDJUV2ggg ^23#V3JnkkYX2vegC ^22ojjWX2tgh ',
    '8AFQ2PA ^23EQ2+ksomlpkflf:id:ea.+-.J ^23JUV2ehfklishe',
    'ufdvddxbdN ^23KYX2LC 7AHQ2HA ^21llk$pmjmmmQ2+ksuoizqa',
    '%zpaypaxo=um=rmgolj$ ^19klk&jlk*fkh.-:V2_ha_oe/:oe=oe',
    'dneimejlgjlj& ^21CMX2MC 7AHQ2GA ^19$qmivoeypb(tojZQ1R',
    'uoi%5ypcuofomj ^16A*enh)=of_md_=.V2_ha/5-oedngimj[& ^19',
    'CvefX2MK 7AHQ2GA ^18nljvof](%1sokZQ1Ruoi%7ypctnhmlk{ ',
    '^13&gmi=of/1_md_+.V2_ha/7-oe)* ^18CMX2MC 7AGQ2?A ^17qmi',
    'xpd}%3qnlQ2Pvoh%9woeolj ^11*dng/3_mc_-.V2_ib/9bof[ ^17',
    'KwdfX2vegC 7AekqQ2!jkm ^16rmiypc%4mmoQ2Pomkplfoi-sl+vn=',
    'ypa%5}omj 9jljbof/4_kbV3fifjliqieokejmecne/5=ofhmj ^16',
    'OwbeX2ufglkl 8gkoQ3hkn ^15qmi(%4xpeglqQ2?AJ:::Vb+_je:',
    'sl=(%4}omj 7*bof/4+oe<:gaV2:::JKwdfXxbdvedpjecof/4+of',
    '[ ^15qiiX3shi 9IRQ2FA ^13omjxpc%4uofllmZQ2FABTV2ba=oli',
    'woe%4woe{ 5&dng/4cnghki===V2TBCufgX2Woji):oe/3aofjlj ',
    '^13CufgX2Wpjj 9AHQ2!jkm ^12{woe%3(snh FQ3@ BSV3ggg{uof',
    '%4tng$ 3Afni/3.oe>)&gggV3SB qiiX3ufgCgmi-oe/3dng& ^12',
    'ojjwbeX2MK 0EQ3ekqA ^11snh%3(rnh$IRQ2?D 1J:::V2T~{uog',
    '%3(pmj 3jlj</3)&~TV2:::J 1KwcfX2WpijAhmi-oe/2>hmi ^11',
    'CufgX3N ^11jkmPQ2Z@ 0nlk}%3tng$DHQ3E 2BcccV3SB{woe%3]',
    '$ 1&)/3dng&BSV3cccB 2NX3Mnkk&fnh/3aof& 0rhiWX2YO ^11A',
    'EQ3PI 9rnh%3wpe{AFQ3?D 3J---V2UgggBpmjypc%2(omj 1jlj<',
    '/2=ofjljBgggUV2:::J 3nkkwdfX3LK&cng/3hmi 9pijYX3Nlkl ',
    '^12DHQ3PhknA 6$woe%3qmiDFQ3Z@ 4BSV3:::#Buog%3tng 1gni',
    '/3fnhB#:::V3SB 4qiixaeX3ufgnkk[:oe/2cng& 6CqijYX3Mnkk',
    ' ^14I!Q3!EA 5olj(%2wpejlnHQ4ekpA 5~bbbV3Udddnkh(%2wpe',
    '$&cog/2<hkidddUV3bbb~ 5CtfhX4Mpiidnf/2<* 5KNWX3wbepij',
    ' ^15A@RQ4HgkoDA 2rmi%3qnl-krQ4FA 7JTV4a=+oi+vn=ypa%(nlj',
    '*</2:md+a=V4TJ 7KLX4Wtgeklecoe>/hmj 2CnkkrhiMX4Wrhi ^17',
    'Agko!Q5PFE@Isni%2yqbkmpQ4FD 9JTV5b=_je:oi-rk=liggkh>/',
    '2_ibV4TJ 9nkkLX5xbdvedrhdojeojgqijqiiNLYX5WrhiC ^18Ahkn',
    '?Q8Rtoj%2ypdglqQ2ZekpA ^11~cccV9_ga/3_g=V3ccc~ ^11Ktfh',
    'xaeX^18wcfqiiC ^21jkmFZQ6Ruoi%2xpedlrQ1?@A ^13B#+++V7',
    '_ha/3_e+V1+++#B ^13CrhiwcfX^15WLojj ^24AhknGRQ4Ruoi%2',
    'xpedlr?ED ^16BJddd+++V5_ha/3_e++++SJB ^16ONwcfX^11Wveg',
    'qijC ^27AIEGPRQRuoj%2}klnD ^20B~jhfkf-fb.b+_-:_.___ha',
    '/3ejg~B ^20nkkqiishevedwcdxbdX2WYMNpjjC ^32ADI2toh%2(',
    'omj ^23snhypaxp=wn=um=mjgfkh/3hmi ^23jlj<coegnejmenkg',
    'qijpijojjnkkC ^40snh%3rni ^23]%2(omjjlj-oe/2)A ^22hmi',
    '/3gmi ^45pmj%3]$ ^21{}%2xpc{&aof/2aof& ^21&)/2:oe[ ^45',
    '{}%2ypcolj ^21rmi%3]$&)/2>hmj ^21*=of/2aof& ^46uog%3uog',
    '$ ^19{wpe%3rmi 1hmj>/2cng& ^19Afnh/3fnhA ^46pmj(%2(pmj',
    ' ^19snh%3}{ 1&bof/2>gmi ^19[</2-oeilj ^47$]%3}nlk ^17',
    'qmi(%3snh 3gmi>/2+of[ ^17*bog/3)& ^48omjypc%3woenlk ^15',
    'pmjxpc%3wpe{ 3&cng/3aof[ ^15*cng/3=ofjlj ^50snh%4wpdpmj',
    ' ^12$rniypc%3(pmj 5[+of/3=ofhmj& ^11A[cog/3>gmi ^51{]',
    '%4ypctngnlk 8$omj](%3yqbsnh 6Agmi:oe/3:oe)jlj& 7A*fni',
    '=of/4)& ^52{]%5xpcuogqminlk{$1{omjrni](%5tng$ 7&gni:oe',
    '/4<dnghmj*&3*[)aof/5dng& ^54{]%7(}2xpc(%6(snh$ 9&gmi-oe',
    '/6<aofbofbogaof+of>/5>)& ^56{tnh(%^17}qmi$ ^11&[aof/^17',
    '<gmi& ^59pmjvoe(%^13(uognlk ^15*fnh</^13:oedng[A ^61$',
    'qmi]ypc%9}uogomj$ ^17&*fnhaof:oe/7>=of)[& ^65$nlkqmitng',
    ']wpe}1woe]snhpmj{ ^23&[gmi)cngbogbofcngdngfnh[*& ^71$',
    '4 ^30A&4 ^99 ^99 ^99 ^99 ^99 9|',
]

image = decompress(COMPRESSED_IMAGE)
animated_camera(image, scale=1/4)

# ---

render(path='olympics.gif')
render()
