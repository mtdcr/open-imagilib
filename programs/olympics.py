from open_imagilib.emulator import *

# ---

# Generated by image_compressor.py
# Original: https://en.wikipedia.org/wiki/Olympic_Games
COMPRESSED_OLYMPIC_RINGS = [
    'ICT1|84|42|ggg ^99 ^99 ^60gghAfhkBbjpC+js.ksD_ktE2:ks',
    '=jrFdinGfhj ^15eeeHaaaI---J___K3JIH ^15kggrefvceLxadM',
    '4wbeNtdfnfgOhggP ^16BF_ksQE8:kscioRghi ^11HJK9JH ^11jgg',
    'sdfSM0LmfgT ^13AGDE1DFRGeimGC+jsQE1+jsB 9bbbK2:::UIddd',
    'VH1VIUK2bbb 9TNM2Ntdeqefpef1SLM3qefP 0ARQEDCfhjA 4Aehl',
    'FE1:ksehl 7===K1JV 7VJK1=== 7OxaeM1vbeoffiggW 4Plfgtdf',
    'M2SP 9GQE-jsXehl 9ARQEXfhj 5IK1IfffY 9YIK1I 5lfgxbeM1',
    'rdfW 8PONM1qef 8BDEXB ^12GQEFA 3VK1I ^13IK1V 3WLM1qef',
    'P ^11TNM1T 6AFEDehl ^14CE1G 2YUK+++ ^15+++KUY 2pefM1tdf',
    'P ^13OM1LP 5BQEC ^15ghiXE+jrA 1cccZK1H ^15HK1Z 1WNMNjgg',
    ' ^14PtdfM1O 5CEDfhj ^16dioEQB 1JK=== ^17===KJ 1OM1ref',
    ' ^16lfgM1tdf 5+jsEFA ^16fhjDER YK1V ^17VK1Y refM1lfg ',
    '^16PLMN 5DER ^17AXEajqPHK1Y ^17YK1H uceMNW ^17SM1 5E1',
    'G ^16PligfkqEllpxpbvnaqj+mh-mifhhg~ ^15ghg?eif.+:_._-kc',
    '=ne!lleridrhegig ^17pefM1 5E1eim ^14Pnjf@voczpa#pnnEomo',
    'zqa$4xpbqle~ ^11?ekf+ne_od_d+_:__lc_oe%1.oe&-oe&ane*fjg',
    '/ ^15pefM1 5E1G ^13ihg(tmd#$1omoElmpxobwoavn=xo=$2woc',
    ')lig 9fig[*%1_od_c-_:_-kc!imejmedoe%1&clf? ^13qefM1 5',
    ':ksEC ^12jhg)$2vneekrECPfee=-_fb.rlcypa]$1ypb{@ 7/-oe',
    '%1:oe}akd_-_KH tdexbdufeeme&%1*? ^12tdeM1 5FEXA 0()$1',
    'xpb@fhlQEG Y...<KZkigvnd$1]mjf 5[-oe%1bmfgigZK<Y qefM',
    '1O/+ne%1*? 0WNML 5GEQehl 9Ptmd$1)jig bjqEDfhj 1===KJ ',
    '~sme$1xpbjhg 3?+ne%1dlf 1JK=== 1kggM1uceP?*%1clf 0off',
    'M1ref 5ghj:ksEFA 8@$1xpbjhg fhlDEajq 2HK1Z Ptmd$1tmd ',
    '3clf%1cmf 1ZK1H 1PuceM1O ?+ne%&/ 8WvbeM1kgg 6RE1R 7P)',
    '$#@ ghi+jrEDB 3+++K<H (xpb$]kig 1gig}%+ne? H<K+++ 3TM',
    '1Njgg /&%* 7PSM1S 7ghi+jrEQGA 5lig#$vndPghiFE1R 4H<KU',
    'Y pkf$1rle> 1dlf%1ekf YUK<H 3PSM1Ljgg bmf%&[ 5PrefM1N',
    'jgg 8B:ksEQCghi 4>$1@fhl+jrE1ajqA 5VK1UV({$)P !%-oe?V',
    'UK1V 5WuceM1NO/%1dkf 4jggtdeM1xbeT 0fhlXE1XRBA2vnc$xpe',
    'djqDE1ajqghi 7V<K1+++slayp=](?}%+ld+++K1<V 7jgguceM2ude',
    'imeaoecmfP1WlfgrefxbeM1NO ^12fhjFE2DXFajrvoi$sol.ktED',
    'RA 9HJK1a+_id:lf:ba==c=_nd%_f=K1JH 9WSM2wcdufdufeLN1M',
    '3Llgg ^14Aeim+jrQE2-ksuok$rnm:ksajqB ^13ZJ:._-._K1_a:',
    '_nd%_e=JZ ^13TuceM8NpefP ^17ABdioajqFajrvoi$wofghj ^17',
    'ojcum+qj+ca++c=_od%cje ^16Pkggmkenkeshevbe1ucerefTP ^24',
    'P)${~ ^17und$#jig?}%cmf ^17?+oe%*P1 ^29tmd$#lig ^16~xpb',
    '${~?+oe%!? ^16[&%clf ^31okf$1sme ^16mjf$1und 1cmf%&[ ',
    '^16dlf%1/ ^31({${jhg ^14Pvnd$1@ 1/&%bmf ^15?-oe%+oe? ',
    '^32>$1undP ^13pkf$1)~ 2*%&ejg ^14cmf%1dkf ^33(xob$1>P',
    ' ^11@]$#@ 3/}%-oe/ ^12dkf%1!? ^34mjf]$1sme( 8Ppkf]$1>',
    ' 5dkf%1-oeejg 9?dlf%1}[ ^36okf]$1xobokf( 4~mjfund$2tmd',
    'P 6clf%1&bmf[ 5?ejg!%1}ejg ^38@{$2{und>qle>tmdxob#$1#',
    '>P 8dlf&%1&!clfdkfekfdkfbmf+oe%2+oe/ ^40jigtnd#$9)@ ^11',
    '/*%9}cmf? ^43ligsmexob#$3{und@~ ^14/cmf+oe&%2}!dlf[ ^99',
    ' ^99 ^74|',
]


# Image as Compressed Text version 1 (RLE)
MAGIC = 'ICT1'
VALUES = '_.:-+=abcdefghijklmnopqrstuvwxyz'
CODES = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ~?!@#$%&*/()[]{}<>'
REPEATS = ' 1234567890'


def decompress(text):
    w = h = x = y = 0
    p = (0, 0, 0)
    codes = {}
    rows = []
    for line in text:

        if not w:
            magic, w, h, line = line.split('|', 3)
            assert magic == MAGIC
            w, h = int(w), int(h)
            assert 0 < w <= 1000
            assert 0 < h <= 1000
            rows = [[] for _ in range(h)]

        if y >= h:
            break

        i = 0
        while i < len(line):
            c = line[i]
            i += 1

            if c in VALUES:
                r = VALUES.index(c) << 3
                g = VALUES.index(line[i]) << 3
                b = VALUES.index(line[i + 1]) << 3
                i += 2
                p = (r, g, b)
                repeats = 1
            elif c in codes:
                p = codes[c]
                repeats = 1
            elif c in CODES:
                codes[c] = p
                continue
            elif c in REPEATS:
                repeats = REPEATS.index(c)
            elif c == '^':
                repeats = int(line[i] + line[i + 1])
                i += 2
            else:
                continue

            for j in range(repeats):
                rows[y].append(p)
                x += 1
                if x == w:
                    x = 0
                    y += 1

        assert i == len(line)

    assert x == 0
    assert y == h

    return rows


OLYMPIC_RINGS = decompress(COMPRESSED_OLYMPIC_RINGS)
del COMPRESSED_OLYMPIC_RINGS

from math import pi, sin, cos

a = Animation()


def animated_camera(img, *, downscale=3, frames=120, total_time=2.0):
    h = len(img)
    w = len(img[0])
    yo = 0.5 * (h - 8 * downscale)
    xo = 0.5 * (w - 8 * downscale)
    omega = 2 * pi / frames
    ft = total_time / frames
    for t in range(frames):
        y = int(round(yo + yo * cos(omega * t)))
        x = int(round(xo - xo * sin(omega * t)))
        blit(img, y, x, downscale)
        a.add_frame(m, ft)


def blit(img, y, x, s):
    for i in range(8):
        y0 = y + i * s
        for j in range(8):
            x0 = x + j * s
            m[i][j] = average_colors(
                img[p][q]
                for p in range(y0, y0 + s)
                for q in range(x0, x0 + s)
            )


def average_colors(colors):
    n = 0
    rs, gs, bs = 0, 0, 0
    for r, g, b in colors:
        rs += r
        gs += g
        bs += b
        n += 1
    h = n // 2
    return (rs + h) // n, (gs + h) // n, (bs + h) // n


animated_camera(OLYMPIC_RINGS)

# ---

render(path='olympics.gif')
render()
