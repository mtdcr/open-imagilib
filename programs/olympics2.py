from open_imagilib.emulator import *

# ---

from math import pi, sin, cos

# Image as Compressed Text version 1 (RLE)
MAGIC = 'ICT1'
VALUES = '_.:-+=abcdefghijklmnopqrstuvwxyz'
CODES = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ~?!@#$%&*/()[]{}<>'
REPEATS = ' 1234567890'


def decompress(text):
    w = h = x = y = 0
    p = (0, 0, 0)
    codes = {}
    rows = []
    for line in text:

        if not w:
            magic, w, h, line = line.split('|', 3)
            assert magic == MAGIC
            w, h = int(w), int(h)
            assert 0 < w <= 1000
            assert 0 < h <= 1000
            rows = [[] for _ in range(h)]

        if y >= h:
            break

        i = 0
        while i < len(line):
            c = line[i]
            i += 1

            if c in VALUES:
                r = VALUES.index(c) << 3
                g = VALUES.index(line[i]) << 3
                b = VALUES.index(line[i + 1]) << 3
                i += 2
                p = (r, g, b)
                repeats = 1
            elif c in codes:
                p = codes[c]
                repeats = 1
            elif c in CODES:
                codes[c] = p
                continue
            elif c in REPEATS:
                repeats = REPEATS.index(c)
            elif c == '^':
                repeats = int(line[i] + line[i + 1])
                i += 2
            else:
                continue

            for j in range(repeats):
                rows[y].append(p)
                x += 1
                if x == w:
                    x = 0
                    y += 1

        assert i == len(line)

    assert x == 0
    assert y == h

    return rows


a = Animation()


def animated_camera(img, *, scale=1.0, frames=100, frame_time_ms=50):
    h = len(img)
    w = len(img[0])
    yo = 0.5 * (h - 8.01 / scale)
    xo = 0.5 * (w - 8.01 / scale)
    omega = 2 * pi / frames
    for t in range(frames):
        y = yo + yo * cos(omega * t)
        x = xo - xo * sin(omega * t)
        transform(img, y, x, scale)
        a.add_frame(m, frame_time_ms)


def transform(img, y0, x0, s):
    si = 1 / s
    for i in range(8):
        y = y0 + i * si
        iy0 = int(y)
        iy1 = iy0 + 1
        r0 = img[iy0]
        r1 = img[iy1]
        wy1 = y - iy0
        wy0 = 1 - wy1
        for j in range(8):
            x = x0 + j * si
            ix0 = int(x)
            ix1 = ix0 + 1
            wx1 = x - ix0
            wx0 = (1 - wx1)
            m[i][j] = sum_colors([
                multiply_color(r0[ix0], wy0 * wx0),
                multiply_color(r0[ix1], wy0 * wx1),
                multiply_color(r1[ix0], wy1 * wx0),
                multiply_color(r1[ix1], wy1 * wx1),
            ])


def sum_colors(colors):
    rs, gs, bs = 0, 0, 0
    for r, g, b in colors:
        rs += r
        gs += g
        bs += b
    return rs, gs, bs


def multiply_color(color, multiplier):
    r, g, b = color
    return (
        int(round(r * multiplier)),
        int(round(g * multiplier)),
        int(round(b * multiplier)),
    )


# Generated by image_compressor.py
# Original: https://en.wikipedia.org/wiki/Olympic_Games
COMPRESSED_IMAGE = [
    'ICT1|48|25|ccc ^54cdeAbegBbehcegcddC 0bbbD1 0eccEhccF',
    'jcciccGfcc ^11B=hm-jqH:krI2+jpaglJA 5D+++K:::L...M1LK',
    'D 5gccobdNubdwadO2vadPqbdQG 8bfjRH.ksS6+jpbeh 3===TM___',
    'U5MT 3jccubdxadV6PmbcW 6RISI=ioXagkRJ+ipS1HB 1TU1---Y',
    'TaaaZ1TYU1T 1GuadV1tbd~NWnbdsbd?OVOW 4cdfHSHRccd! 2CJ',
    'ISX!ZU1KD 3DKU1Zdcc@?VOpbd#E 2@lccPVPF 3JSIR 6=hmSIbeh',
    'KUY 7YUKkbcOVQ@ 5WV1N 2!+ipS+ip! 6B:jrS=gl+-.UZ 7ZUMpbc',
    'VOF 6@~V~@ 1AHSahm 7ifc$fkpSkloum=rk+lhbedc% 5cdc&afc',
    '_-._._gjcmlenidcfc 7#VPfcc 1cdfHSJ 5%qkb*xpanmoSmmozqa',
    '/1ypa(umbjfc 3bfc)+ld.nd_a:U_lc_oe[1:neajd]& 5NVPgcc ',
    '1AHS=hn 4%slbzpayqbkmpSkknum=xo=/1woajgc{ 1)-md[_mc_+.',
    '_._hicjmecoe[1=kd& 4QVPfcc 2XSHcdf 3pjbzpa/uohclrSagk',
    '+-:fb.rk+(/unbfdc&+md[.oe}.haULnbcxbdufdimd[1aid< 3gcc',
    'PV? 3R.krSahm! 1hecxoa/vodfkpSHBTU+-:qka/zpaoib<[1+jc',
    '.-:UTFPVtdddmd[-nd>cec 1@QV1W 3CXS.kr=hnB oib/ypclloS',
    '1J DLUc=:tl=(unbamd[_md.=-ULD #V1tfdime=oebid@FrbdV1?',
    'E 4B+jpS1H+iosmi/wpgclrS=inC 1ZLU=-_ie:lh++nd[_ibULZ ',
    '1ErbdV1wcdtgdsed~OV1ubdG 6cegXIS:kstok/uoi+kqahmA 3DY',
    'U1_b:_nd[_gaYD 3E#OV4O?F 8!bfi=hm+iosni/voedeg 7lgaoi-',
    'kh+>[=ic 7Goidshdted~Qkcc@ ^12!pkc/({ 6@umb/vnabmd[+ld',
    ' 7):ne:oebjd@ ^16kgc(/slbddc 5mic(/*][}bhd 5&=kd[}) ^17',
    '@tmb/(*fdc 2@mhcxoa/xoa$)>[>bhd 3&][1=kd ^19$wna/1vna',
    '*nibojbtmb(/(nib 1<}[}=ld<bhd]+md[1-mdcec ^20{vnb/6xoa',
    'ojb 3<:nd[6+md) ^22fecpjbvnaxpa(1woaslb{ 5)=kd>}1:ne+md',
    '<& ^25%${jfcfec 9&)1bec& ^61|',
]

image = decompress(COMPRESSED_IMAGE)
animated_camera(image, scale=1/2)

# ---

render(path='olympics2.gif')
render()
